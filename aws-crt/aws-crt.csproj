<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net35;net45</TargetFrameworks>
    <PlatformTarget Condition="$(PlatformTarget) == ''">AnyCPU</PlatformTarget>
    <DefineConstants Condition="$(TargetFramework) == 'netstandard2.0'">$(DefineConstants);NETSTANDARD</DefineConstants>
    <DefineConstants Condition="$(TargetFramework) == 'net35'">$(DefineConstants);BCL;BCL35</DefineConstants>
    <DefineConstants Condition="$(TargetFramework) == 'net45'">$(DefineConstants);BCL;BCL45</DefineConstants>
    <RootNamespace>Aws.CRT</RootNamespace>

    <!-- workaround per https://github.com/Microsoft/msbuild/issues/1333 -->
    <FrameworkPathOverride Condition="'$(TargetFramework)' == 'net35'">C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5\Profile\Client</FrameworkPathOverride>

    <!-- workaround per https://github.com/dotnet/msbuild/issues/5985 -->
    <AutomaticallyUseReferenceAssemblyPackages Condition="'$(TargetFramework)' == 'net35'">false</AutomaticallyUseReferenceAssemblyPackages>

    <LibCryptoPath></LibCryptoPath>
    <BuildNativeLibrary>true</BuildNativeLibrary>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageOutputPath>$(ProjectDir)../packages</PackageOutputPath>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <RestoreIgnoreFailedSource>true</RestoreIgnoreFailedSource>

    <PackageId>AWSCRT</PackageId>
    <Title>AWS CRT - AWS Common Runtime</Title>
    <Version>1.0.0-dev</Version>
    <Authors>aws-sdk-common-runtime</Authors>
    <Company>Amazon</Company>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageTags>AWS,native,Amazon</PackageTags>
    <RepositoryUrl>https://github.com/awslabs/aws-crt-dotnet.git</RepositoryUrl>
    <Copyright>Amazon Web Services</Copyright>
    <Description>AWS Common Runtime bindings for .NET</Description>

    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015 Win64</CMakeGenerator64>
    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017 Win64</CMakeGenerator64>
    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '16.0'">Visual Studio 16 2019</CMakeGenerator64>
    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Unix'">Unix Makefiles</CMakeGenerator64>
    <CMakeArch64 Condition="$(CMakeGenerator64) == 'Visual Studio 16 2019'">-A x64</CMakeArch64>

    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015</CMakeGenerator86>
    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017</CMakeGenerator86>
    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '16.0'">Visual Studio 16 2019</CMakeGenerator86>
    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Unix'">Unix Makefiles</CMakeGenerator86>
    <CMakeArch86 Condition="$(CMakeGenerator86) == 'Visual Studio 16 2019'">-A Win32</CMakeArch86>

    <CMakeBinaries>$(ProjectDir)../build</CMakeBinaries>
    <CMakeConfig Condition="$(Configuration) == 'Debug'">Debug</CMakeConfig>
    <CMakeConfig Condition="$(CMakeConfig) == ''">RelWithDebInfo</CMakeConfig>
    <CMakeLibCrypto Condition="$(LibCryptoPath) != ''">-DLibCrypto_INCLUDE_DIR=$(LibCryptoPath)/include -DLibCrypto_STATIC_LIBRARY=$(LibCryptoPath)/lib/libcrypto.a</CMakeLibCrypto>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="CMake" Version="3.5.2" />
    <PackageReference Condition="'$(TargetFramework)' == 'netstandard2.0'" Include="System.Runtime.Loader" Version="4.3.0" />
    <PackageReference Condition="'$(TargetFramework)' != 'net35'" Include="Microsoft.CSharp" Version="4.5.0" />
  </ItemGroup>

  <Target Name="MakeLocalPackageSource" BeforeTargets="Restore;CollectPackageReferences">
    <MakeDir Directories="$(SolutionDir)/packages" />
  </Target>

  <Target Name="BuildNativeX64Library" Condition="$(BuildNativeLibrary) == 'true' AND ($(PlatformTarget) == 'AnyCPU' OR $(PlatformTarget) == 'x64')" BeforeTargets="BuildNativeX86Library">
    <Message Text="Configuring x64 CMake project" Importance="high" />
    <MakeDir Directories="$(CMakeBinaries)/x64" />
    <Exec Command="cmake -G&quot;$(CMakeGenerator64)&quot; -DCMAKE_BUILD_TYPE=$(CMakeConfig) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArch64) $(CMakeLibCrypto) $(ProjectDir)../native" WorkingDirectory="$(CMakeBinaries)/x64" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="Building x64 native library" Importance="high" />
    <Exec Command="cmake --build . --config $(CMakeConfig)" WorkingDirectory="$(CMakeBinaries)/x64" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>

  <Target Name="BuildNativeX86Library" Condition="$(BuildNativeLibrary) == 'true' AND ($(PlatformTarget) == 'AnyCPU' OR $(PlatformTarget) == 'x86') AND $(OS) == 'Windows_NT'" BeforeTargets="EmbedNativeLibraries">
    <Message Text="Configuring x86 CMake project" Importance="high" />
    <MakeDir Directories="$(CMakeBinaries)/x86" />
    <Exec Command="cmake -G&quot;$(CMakeGenerator86)&quot; -DCMAKE_BUILD_TYPE=$(CMakeConfig) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArch86) $(CMakeLibCrypto) $(ProjectDir)../native" WorkingDirectory="$(CMakeBinaries)/x86" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="Building x86 native library" Importance="high" />
    <Exec Command="cmake --build . --config $(CMakeConfig)" WorkingDirectory="$(CMakeBinaries)/x86" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>

  <Target Name="EmbedNativeLibraries" BeforeTargets="PrepareForBuild" AfterTargets="BuildNativeX86Library">
    <ItemGroup>
      <EmbeddedResource Include="$(CMakeBinaries)/*/lib/*aws-crt-dotnet*" Exclude="**/*.ilk" />
    </ItemGroup>
    <Message Text="Embedded library: %(EmbeddedResource.Identity)" Importance="High" />
  </Target>
</Project>
