<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net35;net45</TargetFrameworks>
    <PlatformTarget Condition="$(PlatformTarget) == ''">AnyCPU</PlatformTarget>
    <DefineConstants Condition="$(TargetFramework) == 'netstandard2.0'">$(DefineConstants);NETSTANDARD</DefineConstants>
    <DefineConstants Condition="$(TargetFramework) == 'net35'">$(DefineConstants);BCL;BCL35</DefineConstants>
    <DefineConstants Condition="$(TargetFramework) == 'net45'">$(DefineConstants);BCL;BCL45</DefineConstants>
    <RootNamespace>Aws.CRT</RootNamespace>

    <!-- workaround per https://github.com/Microsoft/msbuild/issues/1333 -->
    <FrameworkPathOverride Condition="'$(TargetFramework)' == 'net35'">C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5\Profile\Client</FrameworkPathOverride>

    <!-- workaround per https://github.com/dotnet/msbuild/issues/5985 -->
    <AutomaticallyUseReferenceAssemblyPackages Condition="'$(TargetFramework)' == 'net35'">false</AutomaticallyUseReferenceAssemblyPackages>

    <BuildNativeLibrary>true</BuildNativeLibrary>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageOutputPath>$(ProjectDir)../packages</PackageOutputPath>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <RestoreIgnoreFailedSource>true</RestoreIgnoreFailedSource>

    <PackageId>AWSCRT</PackageId>
    <Title>AWS CRT - AWS Common Runtime</Title>
    <Version>1.0.0-dev</Version>
    <Authors>aws-sdk-common-runtime</Authors>
    <Company>Amazon</Company>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageTags>AWS,native,Amazon</PackageTags>
    <RepositoryUrl>https://github.com/awslabs/aws-crt-dotnet.git</RepositoryUrl>
    <Copyright>Amazon Web Services</Copyright>
    <Description>AWS Common Runtime bindings for .NET</Description>

    <AssemblyOriginatorKeyFile Condition=" '$(AWSKeyFile)' != '' ">$(AWSKeyFile)</AssemblyOriginatorKeyFile>
    <AssemblyOriginatorKeyFile Condition=" '$(AWSKeyFile)' == '' ">..\awssdk.dll.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>

    <!--
      AwsCrtPlatformTarget is a non-msbuild property that tells the crt build system what target to build the native source for.  We need it separate and independent from msbuild's PlatformTarget property because
      the dotnet cli still has one or more bugs that make it very difficult to work with arm64 builds.  These issues can be worked around by not specifying a platform target until the final test step, but we still
      need to be able to control what architecture the native code gets built for, hence the need for the new property.
      -->
    <AwsCrtPlatformTarget Condition="$(AwsCrtPlatformTarget) == '' AND $(PlatformTarget) == 'AnyCPU'">$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)</AwsCrtPlatformTarget>
    <AwsCrtPlatformTarget Condition="$(AwsCrtPlatformTarget) == '' AND $(PlatformTarget) != 'AnyCPU'">$(PlatformTarget)</AwsCrtPlatformTarget>

    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015 Win64</CMakeGenerator64>
    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017 Win64</CMakeGenerator64>
    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '16.0'">Visual Studio 16 2019</CMakeGenerator64>
    <CMakeGenerator64 Condition="$(CMakeGenerator64) == '' AND $(OS) == 'Unix'">Unix Makefiles</CMakeGenerator64>
    <CMakeArch64 Condition="$(CMakeGenerator64) == 'Visual Studio 16 2019'">-A x64</CMakeArch64>

    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015</CMakeGenerator86>
    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017</CMakeGenerator86>
    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Windows_NT' AND $(VisualStudioVersion) == '16.0'">Visual Studio 16 2019</CMakeGenerator86>
    <CMakeGenerator86 Condition="$(CMakeGenerator86) == '' AND $(OS) == 'Unix'">Unix Makefiles</CMakeGenerator86>
    <CMakeArch86 Condition="$(CMakeGenerator86) == 'Visual Studio 16 2019'">-A Win32</CMakeArch86>

    <IsOSPlatformOSX Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsOSPlatformOSX>
    <CMakeOSXArchitectures Condition="$(IsOSPlatformOSX) AND $(AwsCrtPlatformTarget) == 'Arm64'">-DCMAKE_OSX_ARCHITECTURES=arm64</CMakeOSXArchitectures>
    <CMakeOSXArchitectures Condition="$(IsOSPlatformOSX) AND $(AwsCrtPlatformTarget) == 'x64'">-DCMAKE_OSX_ARCHITECTURES=x86_64</CMakeOSXArchitectures>

    <CMakeBinaries>$(ProjectDir)../build</CMakeBinaries>
    <CMakeConfig Condition="$(Configuration) == 'Debug'">Debug</CMakeConfig>
    <CMakeConfig Condition="$(CMakeConfig) == ''">Release</CMakeConfig>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="CMake" Version="3.5.2">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Condition="'$(TargetFramework)' == 'netstandard2.0'" Include="System.Runtime.Loader" Version="4.3.0" />
    <PackageReference Condition="'$(TargetFramework)' != 'net35'" Include="Microsoft.CSharp" Version="4.5.0" />
  </ItemGroup>

  <Target Name="MakeLocalPackageSource" BeforeTargets="Restore;CollectPackageReferences">
    <MakeDir Directories="$(SolutionDir)/packages" />
  </Target>

  <Target Name="BuildNativeArm64Library" Condition="$(BuildNativeLibrary) == 'true' AND $(AwsCrtPlatformTarget) == 'Arm64'" BeforeTargets="BuildNativeX64Library">
    <Message Text="Configuring Arm64 CMake project" Importance="high" />
    <MakeDir Directories="$(CMakeBinaries)/Arm64" />
    <Exec Command="cmake -G&quot;$(CMakeGenerator64)&quot; -DCMAKE_BUILD_TYPE=$(CMakeConfig) -DBUILD_TESTING=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArch64) $(CMakeOSXArchitectures) $(ProjectDir)../native" WorkingDirectory="$(CMakeBinaries)/Arm64" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="Building Arm64 native library" Importance="high" />
    <Exec Command="cmake --build . --config $(CMakeConfig)" WorkingDirectory="$(CMakeBinaries)/Arm64" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>

  <Target Name="BuildNativeX64Library" Condition="$(BuildNativeLibrary) == 'true' AND $(AwsCrtPlatformTarget) == 'x64'" BeforeTargets="BuildNativeX86Library">
    <Message Text="Configuring x64 CMake project" Importance="high" />
    <MakeDir Directories="$(CMakeBinaries)/x64" />
    <Exec Command="cmake -G&quot;$(CMakeGenerator64)&quot; -DCMAKE_BUILD_TYPE=$(CMakeConfig) -DBUILD_TESTING=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArch64) $(CMakeOSXArchitectures) $(ProjectDir)../native" WorkingDirectory="$(CMakeBinaries)/x64" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="Building x64 native library" Importance="high" />
    <Exec Command="cmake --build . --config $(CMakeConfig)" WorkingDirectory="$(CMakeBinaries)/x64" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>

  <Target Name="BuildNativeX86Library" Condition="$(BuildNativeLibrary) == 'true' AND $(AwsCrtPlatformTarget) == 'x86' AND $(OS) == 'Windows_NT'" BeforeTargets="EmbedNativeLibraries">
    <Message Text="Configuring x86 CMake project" Importance="high" />
    <MakeDir Directories="$(CMakeBinaries)/x86" />
    <Exec Command="cmake -G&quot;$(CMakeGenerator86)&quot; -DCMAKE_BUILD_TYPE=$(CMakeConfig) -DBUILD_TESTING=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArch86) $(ProjectDir)../native" WorkingDirectory="$(CMakeBinaries)/x86" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="Building x86 native library" Importance="high" />
    <Exec Command="cmake --build . --config $(CMakeConfig)" WorkingDirectory="$(CMakeBinaries)/x86" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>

  <Target Name="EmbedNativeLibraries" BeforeTargets="PrepareForBuild" AfterTargets="BuildNativeX86Library">
    <ItemGroup>
      <EmbeddedResource Include="$(CMakeBinaries)/*/lib/*aws-crt-dotnet*" Exclude="**/*.ilk;**/*.dbg" />
    </ItemGroup>
    <Message Text="Embedded library: %(EmbeddedResource.Identity)" Importance="High" />
  </Target>
</Project>
